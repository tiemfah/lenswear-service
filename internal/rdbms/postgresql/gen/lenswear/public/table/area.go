//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Area = newAreaTable("public", "area", "")

type areaTable struct {
	postgres.Table

	//Columns
	AreaID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AreaTable struct {
	areaTable

	EXCLUDED areaTable
}

// AS creates new AreaTable with assigned alias
func (a AreaTable) AS(alias string) *AreaTable {
	return newAreaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AreaTable with assigned schema name
func (a AreaTable) FromSchema(schemaName string) *AreaTable {
	return newAreaTable(schemaName, a.TableName(), a.Alias())
}

func newAreaTable(schemaName, tableName, alias string) *AreaTable {
	return &AreaTable{
		areaTable: newAreaTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newAreaTableImpl("", "excluded", ""),
	}
}

func newAreaTableImpl(schemaName, tableName, alias string) areaTable {
	var (
		AreaIDColumn   = postgres.StringColumn("area_id")
		allColumns     = postgres.ColumnList{AreaIDColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return areaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AreaID: AreaIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
