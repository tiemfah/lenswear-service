//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ApparelImage = newApparelImageTable("public", "apparel_image", "")

type apparelImageTable struct {
	postgres.Table

	//Columns
	ApparelID       postgres.ColumnString
	ApparelImageURL postgres.ColumnString
	CreateDate      postgres.ColumnTimestamp
	UpdateDate      postgres.ColumnTimestamp
	CreateBy        postgres.ColumnString
	UpdateBy        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApparelImageTable struct {
	apparelImageTable

	EXCLUDED apparelImageTable
}

// AS creates new ApparelImageTable with assigned alias
func (a ApparelImageTable) AS(alias string) *ApparelImageTable {
	return newApparelImageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApparelImageTable with assigned schema name
func (a ApparelImageTable) FromSchema(schemaName string) *ApparelImageTable {
	return newApparelImageTable(schemaName, a.TableName(), a.Alias())
}

func newApparelImageTable(schemaName, tableName, alias string) *ApparelImageTable {
	return &ApparelImageTable{
		apparelImageTable: newApparelImageTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newApparelImageTableImpl("", "excluded", ""),
	}
}

func newApparelImageTableImpl(schemaName, tableName, alias string) apparelImageTable {
	var (
		ApparelIDColumn       = postgres.StringColumn("apparel_id")
		ApparelImageURLColumn = postgres.StringColumn("apparel_image_url")
		CreateDateColumn      = postgres.TimestampColumn("create_date")
		UpdateDateColumn      = postgres.TimestampColumn("update_date")
		CreateByColumn        = postgres.StringColumn("create_by")
		UpdateByColumn        = postgres.StringColumn("update_by")
		allColumns            = postgres.ColumnList{ApparelIDColumn, ApparelImageURLColumn, CreateDateColumn, UpdateDateColumn, CreateByColumn, UpdateByColumn}
		mutableColumns        = postgres.ColumnList{ApparelIDColumn, ApparelImageURLColumn, CreateDateColumn, UpdateDateColumn, CreateByColumn, UpdateByColumn}
	)

	return apparelImageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApparelID:       ApparelIDColumn,
		ApparelImageURL: ApparelImageURLColumn,
		CreateDate:      CreateDateColumn,
		UpdateDate:      UpdateDateColumn,
		CreateBy:        CreateByColumn,
		UpdateBy:        UpdateByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
