//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Apparel = newApparelTable("public", "apparel", "")

type apparelTable struct {
	postgres.Table

	//Columns
	ApparelID     postgres.ColumnString
	ApparelTypeID postgres.ColumnString
	Name          postgres.ColumnString
	Brand         postgres.ColumnString
	Price         postgres.ColumnString
	StoreURL      postgres.ColumnString
	CreateDate    postgres.ColumnTimestamp
	UpdateDate    postgres.ColumnTimestamp
	CreateBy      postgres.ColumnString
	UpdateBy      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApparelTable struct {
	apparelTable

	EXCLUDED apparelTable
}

// AS creates new ApparelTable with assigned alias
func (a ApparelTable) AS(alias string) *ApparelTable {
	return newApparelTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApparelTable with assigned schema name
func (a ApparelTable) FromSchema(schemaName string) *ApparelTable {
	return newApparelTable(schemaName, a.TableName(), a.Alias())
}

func newApparelTable(schemaName, tableName, alias string) *ApparelTable {
	return &ApparelTable{
		apparelTable: newApparelTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newApparelTableImpl("", "excluded", ""),
	}
}

func newApparelTableImpl(schemaName, tableName, alias string) apparelTable {
	var (
		ApparelIDColumn     = postgres.StringColumn("apparel_id")
		ApparelTypeIDColumn = postgres.StringColumn("apparel_type_id")
		NameColumn          = postgres.StringColumn("name")
		BrandColumn         = postgres.StringColumn("brand")
		PriceColumn         = postgres.StringColumn("price")
		StoreURLColumn      = postgres.StringColumn("store_url")
		CreateDateColumn    = postgres.TimestampColumn("create_date")
		UpdateDateColumn    = postgres.TimestampColumn("update_date")
		CreateByColumn      = postgres.StringColumn("create_by")
		UpdateByColumn      = postgres.StringColumn("update_by")
		allColumns          = postgres.ColumnList{ApparelIDColumn, ApparelTypeIDColumn, NameColumn, BrandColumn, PriceColumn, StoreURLColumn, CreateDateColumn, UpdateDateColumn, CreateByColumn, UpdateByColumn}
		mutableColumns      = postgres.ColumnList{ApparelTypeIDColumn, NameColumn, BrandColumn, PriceColumn, StoreURLColumn, CreateDateColumn, UpdateDateColumn, CreateByColumn, UpdateByColumn}
	)

	return apparelTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApparelID:     ApparelIDColumn,
		ApparelTypeID: ApparelTypeIDColumn,
		Name:          NameColumn,
		Brand:         BrandColumn,
		Price:         PriceColumn,
		StoreURL:      StoreURLColumn,
		CreateDate:    CreateDateColumn,
		UpdateDate:    UpdateDateColumn,
		CreateBy:      CreateByColumn,
		UpdateBy:      UpdateByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
