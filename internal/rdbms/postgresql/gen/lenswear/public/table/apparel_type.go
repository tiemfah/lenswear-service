//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ApparelType = newApparelTypeTable("public", "apparel_type", "")

type apparelTypeTable struct {
	postgres.Table

	//Columns
	ApparelTypeID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApparelTypeTable struct {
	apparelTypeTable

	EXCLUDED apparelTypeTable
}

// AS creates new ApparelTypeTable with assigned alias
func (a ApparelTypeTable) AS(alias string) *ApparelTypeTable {
	return newApparelTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApparelTypeTable with assigned schema name
func (a ApparelTypeTable) FromSchema(schemaName string) *ApparelTypeTable {
	return newApparelTypeTable(schemaName, a.TableName(), a.Alias())
}

func newApparelTypeTable(schemaName, tableName, alias string) *ApparelTypeTable {
	return &ApparelTypeTable{
		apparelTypeTable: newApparelTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newApparelTypeTableImpl("", "excluded", ""),
	}
}

func newApparelTypeTableImpl(schemaName, tableName, alias string) apparelTypeTable {
	var (
		ApparelTypeIDColumn = postgres.StringColumn("apparel_type_id")
		allColumns          = postgres.ColumnList{ApparelTypeIDColumn}
		mutableColumns      = postgres.ColumnList{}
	)

	return apparelTypeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApparelTypeID: ApparelTypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
